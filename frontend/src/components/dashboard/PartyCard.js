import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { partyLabels, partyColors, partyLogos, partyInfo, } from "@/utils/partyMap";
const PartyCard = ({ prediction, partyCode, title, showRunnerUp, }) => {
    // ðŸŸ¢ Alignment Party Card (simplified)
    if (partyCode) {
        return (_jsxs("div", { className: "p-6 rounded-2xl shadow-lg text-white flex flex-col justify-between", style: { backgroundColor: partyColors[partyCode] || "#888" }, children: [title && _jsx("h3", { className: "text-sm font-semibold", children: title }), _jsxs("div", { children: [_jsxs("div", { className: "flex items-center gap-3", children: [_jsx("img", { src: partyLogos[partyCode], alt: partyLabels[partyCode], className: "w-10 h-10" }), _jsx("h2", { className: "text-xl font-bold", children: partyLabels[partyCode] })] }), _jsx("p", { className: "italic text-sm mt-2", children: "Your chosen alignment party." })] }), _jsxs("div", { className: "mt-4 bg-white/20 rounded-lg p-3 text-sm", children: [_jsx("p", { className: "font-semibold text-white", children: "About this alignment" }), _jsx("p", { className: "text-white/90 mt-1", children: "This reflects the party you personally selected. It may differ from your survey-based prediction." })] })] }));
    }
    // ðŸ”µ Predicted Party Card
    if (prediction) {
        const confidence = prediction.confidence ?? null;
        const party = prediction.party;
        return (_jsxs("div", { className: "p-6 rounded-2xl shadow-lg text-white flex flex-col justify-between", style: { backgroundColor: partyColors[party] || "#888" }, children: [title && _jsx("h3", { className: "text-sm font-semibold", children: title }), _jsxs("div", { className: "flex items-center gap-3 justify-between", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx("img", { src: partyLogos[party], alt: partyLabels[party], className: "w-10 h-10" }), _jsx("h2", { className: "text-xl font-bold", children: prediction.partyLabel || partyLabels[party] })] }), confidence !== null && (_jsxs("div", { className: "text-right", children: [_jsxs("span", { className: "font-bold", children: [confidence.toFixed(1), "%"] }), _jsx("p", { className: "text-xs", children: confidence >= 50 ? "High confidence" : "Low confidence" })] }))] }), _jsxs("p", { className: "italic text-sm mt-2", children: ["\"", partyInfo[party].slogan, "\""] }), _jsx("ul", { className: "text-sm list-disc ml-4 mt-2 space-y-1", children: partyInfo[party].policies.map((p, i) => (_jsx("li", { children: p }, i))) }), _jsxs("p", { className: "text-xs mt-2 opacity-90", children: ["\uD83D\uDC65 ", partyInfo[party].voters] }), showRunnerUp && prediction.runnerUp && (_jsxs("p", { className: "text-sm mt-3", children: ["\uD83E\uDD48 Runner-up: ", prediction.runnerUp] })), confidence !== null && confidence < 50 && (_jsxs("div", { className: "bg-yellow-50 dark:bg-yellow-900/40 border-l-4 border-yellow-400 p-3 rounded text-sm mt-3", children: [_jsx("p", { className: "text-yellow-700 dark:text-yellow-200 font-semibold", children: "\u26A0\uFE0F Low Confidence Prediction" }), _jsx("p", { className: "text-gray-700 dark:text-gray-300 mt-1", children: "This prediction is below 50% confidence." })] }))] }));
    }
    return (_jsx("div", { className: "p-6 rounded-2xl shadow-lg bg-gray-200 text-gray-600 text-center", children: _jsx("p", { children: "No party information available" }) }));
};
export default PartyCard;
